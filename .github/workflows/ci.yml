name: Infrastructure & Configuration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Quick validation using our test scripts (fast feedback)
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Docker Compose
      run: |
        # Install docker-compose for compatibility
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
    
    - name: Make test scripts executable
      run: chmod +x tests/*.sh scripts/*.sh
    
    - name: Run environment validation tests
      run: ./scripts/run-tests.sh validation

  # Comprehensive containerized testing
  containerized-tests:
    name: Containerized Test Suite
    runs-on: ubuntu-latest
    needs: quick-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Docker Compose
      run: |
        # Install docker-compose for compatibility
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
    
    - name: Make test scripts executable
      run: chmod +x test-containerized.sh scripts/run-tests.sh tests/*.sh
    
    - name: Run containerized tests
      run: ./test-containerized.sh
    
    - name: Upload test results and output
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test-output/
          tests/
        retention-days: 7

  # Security scanning
  security-checks:
    name: Security Configuration Checks
    runs-on: ubuntu-latest
    needs: quick-validation
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'table'
        exit-code: '0'
    
    - name: Check for hardcoded secrets
      run: |
        # Check for potential hardcoded secrets (excluding test files)
        if grep -r -i "password\|secret\|key" --include="*.yml" --include="*.yaml" --exclude="*.sample" . | grep -v "your_.*_here" | grep -v "test_"; then
          echo "Warning: Potential hardcoded secrets found"
        else
          echo "✓ No hardcoded secrets detected"
        fi

  # Service startup validation (lightweight)
  service-validation:
    name: Service Startup Validation
    runs-on: ubuntu-latest
    needs: containerized-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Docker Compose
      run: |
        # Install docker-compose for compatibility
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
    
    - name: Create test environment
      run: |
        cp .env.sample .env
        sed -i 's|DATA_DIR=.*|DATA_DIR=/tmp/test-data|' .env
        sed -i 's|DOCKER_CONFIG_DIR=.*|DOCKER_CONFIG_DIR=/tmp/test-config|' .env
        sed -i 's|HOSTNAME=.*|HOSTNAME=test.local|' .env
    
    - name: Test basic service startup (without VPN)
      run: |
        # Detect compose command
        if command -v docker >/dev/null 2>&1 && docker compose version >/dev/null 2>&1; then
          COMPOSE_CMD="docker compose"
        elif command -v docker-compose >/dev/null 2>&1; then
          COMPOSE_CMD="docker-compose"
        else
          echo "Error: Neither 'docker compose' nor 'docker-compose' found"
          exit 1
        fi
        
        # Start only basic services (exclude gluetun and qbittorrent for CI)
        $COMPOSE_CMD up -d socket-proxy traefik
        
        # Wait for services to start
        sleep 30
        
        # Check if services are running
        if ! $COMPOSE_CMD ps socket-proxy | grep -q "Up"; then
          echo "Error: socket-proxy failed to start"
          $COMPOSE_CMD logs socket-proxy
          exit 1
        fi
        
        if ! $COMPOSE_CMD ps traefik | grep -q "Up"; then
          echo "Error: traefik failed to start"
          $COMPOSE_CMD logs traefik
          exit 1
        fi
        
        echo "✓ Basic services started successfully"
    
    - name: Test Traefik dashboard accessibility
      run: |
        # Wait a bit more for Traefik to be ready
        sleep 10
        
        # Test Traefik dashboard
        if ! curl -f http://localhost:8081/api/rawdata > /dev/null 2>&1; then
          echo "Error: Traefik dashboard not accessible"
          docker-compose logs traefik || docker compose logs traefik
          exit 1
        fi
        
        echo "✓ Traefik dashboard is accessible"
    
    - name: Cleanup
      run: |
        # Detect compose command
        if command -v docker >/dev/null 2>&1 && docker compose version >/dev/null 2>&1; then
          COMPOSE_CMD="docker compose"
        elif command -v docker-compose >/dev/null 2>&1; then
          COMPOSE_CMD="docker-compose"
        else
          COMPOSE_CMD="docker-compose"  # fallback
        fi
        
        $COMPOSE_CMD down -v || true
        docker system prune -f || true